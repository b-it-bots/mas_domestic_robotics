#!/usr/bin/python
from importlib import import_module

import rospy
import smach
import smach_ros
from mongodb_store.message_store import MessageStoreProxy

from mdr_monitoring_msgs.msg import ExecutionState
from mdr_execution_manager.sm_loader import SMLoader

class StateMachine(smach.StateMachine):
    '''An interface for creating state machines from state machine description files

    Author -- Alex Mitrevski
    Email -- aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self, sm_data, recover_sm=False, save_sm_state=False):
        smach.StateMachine.__init__(self, outcomes=sm_data.outcomes)
        self.msg_store_client = MessageStoreProxy()

        saved_state = None
        if recover_sm:
            saved_state = self.get_saved_state(sm_data.id)

        with self:
            if saved_state is not None:
                rospy.loginfo('[SM creator] Starting state machine from state %s' % saved_state)
                state = sm_data.state_params[saved_state]
                state_class = getattr(import_module(state.state_module_name),
                                      state.state_class_name)
                smach.StateMachine.add(state.name,
                                       state_class(**state.args),
                                       transitions=state.transitions)

            for _, state in sm_data.state_params.items():
                if state.name != saved_state:
                    state_class = getattr(import_module(state.state_module_name),
                                          state.state_class_name)
                    smach.StateMachine.add(state.name,
                                           state_class(save_sm_state=save_sm_state,
                                                       **state.args),
                                           transitions=state.transitions)

    def get_saved_state(self, sm_id):
        rospy.loginfo('[SM creator] Checking if the execution should continue from a saved state')
        try:
            state_msg = self.msg_store_client.query_named('current_state',
                                                          ExecutionState._type)
            execution_end_msg = self.msg_store_client.query_named('execution_end',
                                                                  ExecutionState._type)

            if state_msg and state_msg[0] is None:
                return None

            # we only consider saved states if the state machine did not
            # finish fully the last time it was executed
            if state_msg and state_msg[0].state_machine == sm_id:
                if not execution_end_msg or \
                execution_end_msg[0].stamp.secs < state_msg[0].stamp.secs:
                    return state_msg[0].state
            return None
        except:
            rospy.logerr('[SM creator] Error retriving knowledge about the current state')
            return None

    def save_execution_end(self, sm_id):
        rospy.loginfo('[SM creator] Saving the end of the execution')
        execution_state_msg = ExecutionState()
        execution_state_msg.stamp = rospy.Time.now()
        execution_state_msg.state_machine = sm_id
        execution_state_msg.state = 'DONE'
        try:
            self.msg_store_client.insert_named('execution_end', execution_state_msg)
        except:
            rospy.logerr('[SM creator] Error while saving the execution end of %s' % sm_id)


if __name__ == '__main__':
    sm_config_file = rospy.get_param('/sm_config_file', '')
    parent_sm_config_file = rospy.get_param('/parent_sm_config_file', '')
    sm_data = SMLoader.load_sm(sm_config_file, parent_sm_config_file)

    recover_sm = rospy.get_param('/recover_sm', False)
    save_sm_state = rospy.get_param('/save_sm_state', False)

    rospy.init_node(sm_data.id)
    state_machine = StateMachine(sm_data,
                                 recover_sm=recover_sm,
                                 save_sm_state=save_sm_state)
    smach_viewer = smach_ros.IntrospectionServer(sm_data.id, state_machine, sm_data.id)
    smach_viewer.start()
    result = state_machine.execute()
    while result is None and not rospy.is_shutdown():
        rospy.spin()
    rospy.loginfo('%s complete' % (sm_data.id))

    if save_sm_state:
        state_machine.save_execution_end(sm_data.id)
    smach_viewer.stop()
