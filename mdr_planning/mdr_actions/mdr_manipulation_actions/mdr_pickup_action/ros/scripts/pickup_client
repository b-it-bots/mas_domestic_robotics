#!/usr/bin/env python
import rospy
import actionlib
import tf

from mas_perception_msgs.msg import Object
from mdr_rosplan_interface.action_client_base import ActionClientBase
from mas_knowledge_base.knowledge_base_interface import KBException
from mdr_pickup_action.msg import PickupAction, PickupGoal

class PickupClient(ActionClientBase):
    '''Defines a client for an object pickup action.

    @author Alex Mitrevski
    @contact aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        super(PickupClient, self).__init__()

        self.obj = None
        self.obj_plane = None
        self.context = None
        self.frame_id = rospy.get_param('~grasping_pose_frame', 'base_link')
        self.tf_listener = tf.TransformListener()
        self.strategy = PickupGoal.SIDEWAYS_GRASP
        while not rospy.is_shutdown():
            rospy.sleep(0.1)

    def call_action(self, msg):
        # we only react to calls to this action
        if self.action_name != msg.name.lower():
            return

        rospy.loginfo('[PICKUP] Action request received')
        self.action_id = msg.action_id
        self.__reset_action_parameters()

        client = actionlib.SimpleActionClient(self.action_server_name, PickupAction)
        client.wait_for_server()
        goal = self.get_action_message(msg)
        if goal:
            # calling the actionlib server and waiting for the execution to end
            rospy.loginfo('[pickup] Sending actionlib goal to %s' % self.action_server_name)
            client.send_goal(goal)
            client.wait_for_result(rospy.Duration.from_sec(int(self.action_timeout)))
            result = client.get_result()

            if result and result.success:
                rospy.loginfo('[PICKUP] Updating the knowledge base')
                self.update_knowledge_base()
                self.send_action_feedback(True)
            else:
                self.send_action_feedback(False)
        else:
            rospy.loginfo('[pickup] The action dispatch message could not be created; ignoring request')

    def get_action_message(self, rosplan_action_msg):
        '''Reads the action parameters and uses them to initialise an actionlib message.
        '''
        goal = PickupGoal()
        for param in rosplan_action_msg.parameters:
            if param.key == 'obj':
                self.obj = param.value
            elif param.key == 'plane':
                self.obj_plane = param.value
            elif param.key == 'bot':
                self.robot_name = param.value
            elif param.key == 'context':
                self.context = param.value
            elif param.key == 'strategy':
                if param.value == 'sideways_grasp':
                    self.strategy = PickupGoal.SIDEWAYS_GRASP
                    rospy.loginfo('[pickup] pickup_client: strategy - SIDEWAYS_GRASP')
                else:
                    self.strategy = PickupGoal.TOP_GRASP
                    rospy.loginfo('[pickup] pickup_client: strategy - TOP_GRASP')

        try:
            obj = self.kb_interface.get_obj_instance(self.obj, Object._type)
            object_pose = obj.pose
            object_pose.header.stamp = rospy.Time(0)

            goal.pose.header.frame_id = self.frame_id
            goal.pose.header.stamp = rospy.Time.now()
            object_pose_in_grasp_frame = self.tf_listener.transformPose(self.frame_id,
                                                                        object_pose)
            goal.pose = object_pose_in_grasp_frame
            goal.context = self.context
            goal.strategy = self.strategy
            return goal
        except KBException as exc:
            rospy.logerr('[pickup] %s', str(exc))
            return None

    def update_knowledge_base(self):
        '''Updates the knowledge base with the following facts:
        * the robot is holding the grasped object
        * the object is not on the plane anymore
        * the robot's gripper is not empty anymore (if the grasping context
          is not tabletop manipulation; if it is, the robot is still holding
          the object)
        '''
        facts_to_add = [('holding', [('bot', self.robot_name), ('obj', self.obj)])]
        facts_to_remove = [('on', [('obj', self.obj), ('plane', self.obj_plane)])]
        if self.context != PickupGoal.CONTEXT_TABLETOP_MANIPULATION:
            facts_to_remove.append(('empty_gripper', [('bot', self.robot_name)]))
        self.kb_interface.update_kb(facts_to_add, facts_to_remove)

    def __reset_action_parameters(self):
        self.obj = None
        self.obj_plane = None
        self.context = None

if __name__ == '__main__':
    rospy.init_node('pickup_client')
    try:
        PickupClient()
    except rospy.ROSInterruptException:
        pass
