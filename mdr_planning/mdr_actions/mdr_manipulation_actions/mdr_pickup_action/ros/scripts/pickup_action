#!/usr/bin/env python
import rospy
import smach

from smach_ros import ActionServerWrapper, IntrospectionServer

from mdr_pickup_action.msg import PickupAction
from mdr_pickup_action.action_states import (SetupPickup, Pickup, SetActionLibResult)


class PickupSkill(smach.StateMachine):
    def __init__(self):
        smach.StateMachine.__init__(self,
                                    outcomes=['OVERALL_SUCCESS',
                                              'OVERALL_FAILED', 'PREEMPTED'],
                                    input_keys=['pickup_goal'],
                                    output_keys=['pickup_feedback',
                                                 'pickup_result'])

        move_arm_server = rospy.get_param('~move_arm_server', 'move_arm_server')
        move_base_server = rospy.get_param('~move_base_server', 'move_base_server')
        gripper_cmd_topic = rospy.get_param('~gripper_cmd_topic', 'gripper_controller')
        gripper_joint_names = rospy.get_param('~gripper_joint_names', ['gripper'])
        open_gripper_joint_values = rospy.get_param('~open_gripper_joint_values', [1.])
        pregrasp_config_name = rospy.get_param('~pregrasp_config_name', 'pregrasp')
        grasp_offset = float(rospy.get_param('~intermediate_grasp_offset', -1.))
        safe_arm_joint_config = rospy.get_param('~safe_arm_joint_config', 'folded')
        base_elbow_offset = float(rospy.get_param('~base_elbow_offset', -1.))
        object_offset = float(rospy.get_param('~object_offset', 1.))
        grasping_orientation = rospy.get_param('~grasping_orientation', list())

        with self:
            smach.StateMachine.add('SETUP_PICKUP', SetupPickup(),
                                   transitions={'succeeded': 'PICKUP',
                                                'failed': 'SETUP_PICKUP'})

            smach.StateMachine.add('PICKUP', Pickup(move_arm_server=move_arm_server,
                                                    move_base_server=move_base_server,
                                                    gripper_joint_names=gripper_joint_names,
                                                    open_gripper_joint_values=open_gripper_joint_values,
                                                    gripper_cmd_topic=gripper_cmd_topic,
                                                    pregrasp_config_name=pregrasp_config_name,
                                                    intermediate_grasp_offset=grasp_offset,
                                                    safe_arm_joint_config=safe_arm_joint_config,
                                                    base_elbow_offset=base_elbow_offset,
                                                    object_offset=object_offset,
                                                    grasping_orientation=grasping_orientation),
                                   transitions={'succeeded': 'SET_ACTION_LIB_SUCCESS',
                                                'failed': 'SET_ACTION_LIB_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_FAILED',
                                   SetActionLibResult(False),
                                   transitions={'succeeded': 'OVERALL_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_SUCCESS',
                                   SetActionLibResult(True),
                                   transitions={'succeeded': 'OVERALL_SUCCESS'})


if __name__ == '__main__':
    rospy.init_node('pickup_server')
    sm = PickupSkill()
    sis = IntrospectionServer('pickup_smach_viewer', sm,
                              '/PICKUP_SMACH_VIEWER')
    sis.start()

    asw = ActionServerWrapper(
        server_name='pickup_server',
        action_spec=PickupAction,
        wrapped_container=sm,
        succeeded_outcomes=['OVERALL_SUCCESS'],
        aborted_outcomes=['OVERALL_FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='pickup_goal',
        feedback_key='pickup_feedback',
        result_key='pickup_result')

    asw.run_server()
    rospy.spin()
