#!/usr/bin/env python
import rospy
import actionlib

from mdr_move_arm_action.msg import MoveArmAction
from mdr_move_arm_action.action_states import MoveArmSM

class MoveArmServer(object):
    '''A server exposing an arm moving action.

    The server expects the following parameters to be made available on the ROS parameter server:
    * arm_name: Name of an arm MoveIt! group

    @author Alex Mitrevski
    @contact aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        arm_name = rospy.get_param('~arm_name', 'arm')

        rospy.loginfo('[move_arm] Initialising state machine')
        self.action_sm = MoveArmSM(arm_name=arm_name)
        rospy.loginfo('[move_arm] State machine initialised')

        self.action_server = actionlib.SimpleActionServer('move_arm_server',
                                                          MoveArmAction,
                                                          self.execute, False)
        self.action_server.start()
        rospy.loginfo('move_arm action server ready')

    def execute(self, goal):
        rospy.loginfo('[move_arm] Received an action request')
        self.action_sm.goal = goal
        self.action_sm.result = None
        self.action_sm.execution_requested = True
        while not self.action_sm.result and not self.action_server.is_preempt_requested():
            rospy.sleep(0.05)

        if not self.action_server.is_preempt_requested():
            self.action_server.set_succeeded(self.action_sm.result)
        else:
            self.action_sm.preempted = True

if __name__ == '__main__':
    rospy.init_node('move_arm_server')
    move_arm_server = MoveArmServer()
    try:
        move_arm_server.action_sm.run()
        while move_arm_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(move_arm_server.action_sm.name))
        move_arm_server.action_sm.stop()
