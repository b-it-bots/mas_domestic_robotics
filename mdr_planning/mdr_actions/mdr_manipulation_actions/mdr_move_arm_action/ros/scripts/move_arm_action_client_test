#! /usr/bin/env python
from __future__ import print_function
import sys
import ast

import rospy
import roslib
import actionlib
from geometry_msgs.msg import PoseStamped

from mas_tools.ros_utils import get_package_path
from mdr_move_arm_action.msg import MoveArmAction, MoveArmGoal

def print_usage_info():
    print('usage: move_arm <goal_type> <goal>' +
          ' where <goal_type> is an integer that takes the values:\n' +
          '    1 (named target)\n' +
          '    2 (pose)\n' +
          '    3 (joint values)\n' +
          'The value of <goal> thus corresponds to the chosen <goal_type>:\n' +
          '    1. <goal> should be a string equal to one of the targets specified in the action definition\n' +
          '    2. <goal> should be a list of the following values: "[\'frame\', x, y, z, q_x, q_y, q_z, q_w]"\n' +
          '    3. <goal> should be a list of joint values')


if __name__ == '__main__':
    rospy.init_node('move_arm_client_test')

    client = actionlib.SimpleActionClient('/move_arm_server', MoveArmAction)
    client.wait_for_server()

    goal = MoveArmGoal()
    if len(sys.argv) < 3:
        rospy.logerr('Arguments were not received in the proper format')
        print_usage_info()
    else:
        try:
            correct_input = True
            goal.goal_type = int(sys.argv[1])
            if goal.goal_type == MoveArmGoal.NAMED_TARGET:
                goal.named_target = sys.argv[2]
            elif goal.goal_type == MoveArmGoal.END_EFFECTOR_POSE:
                params = ast.literal_eval(sys.argv[2])

                pose = PoseStamped()
                pose.header.frame_id = params[0]

                pose.pose.position.x = params[1]
                pose.pose.position.y = params[2]
                pose.pose.position.z = params[3]

                pose.pose.orientation.x = params[4]
                pose.pose.orientation.y = params[5]
                pose.pose.orientation.z = params[6]
                pose.pose.orientation.w = params[7]

                goal.end_effector_pose = pose
                goal.dmp_name = get_package_path('mdr_pickup_action', 'config',
                                                 'trajectory_weights', 'weights_table_grasp.yaml')
                goal.dmp_tau = 30.
            elif goal.goal_type == MoveArmGoal.JOINT_VALUES:
                params = ast.literal_eval(sys.argv[2])
                goal.joint_values = params
            else:
                correct_input = False
                print('Unknown <goal_type> specified; ignoring request')

            if correct_input:
                timeout = 15.0
                rospy.loginfo('Sending action lib goal to move_arm_server')
                client.send_goal(goal)
                client.wait_for_result(rospy.Duration.from_sec(int(timeout)))
                print(client.get_result())
        except Exception as e:
            print(e)
