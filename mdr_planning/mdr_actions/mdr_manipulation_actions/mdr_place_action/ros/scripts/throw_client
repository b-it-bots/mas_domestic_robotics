#!/usr/bin/env python
import numpy as np
import rospy
import tf
import actionlib

from std_msgs.msg import Header
from geometry_msgs.msg import Point, Quaternion, Pose, PoseStamped

import rosplan_dispatch_msgs.msg as plan_dispatch_msgs
from mas_perception_msgs.msg import Object

from action_execution.action import Action
from ae_ros_message_converter.converter_factory import ConverterFactory

from mdr_rosplan_interface.action_client_base import ActionClientBase
from mdr_place_action.msg import PlaceAction, PlaceGoal

class ThrowClient(ActionClientBase):
    '''Defines a client for an object throwing action.

    @author Alex Mitrevski
    @contact aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        super(ThrowClient, self).__init__()

        self.throwing_target = None
        self.obj = None
        self.frame_id = rospy.get_param('~placing_pose_frame', 'base_link')
        self.tf_listener = tf.TransformListener()

        while not rospy.is_shutdown():
            rospy.sleep(0.1)

    def call_action(self, msg):
        # we only react to calls to this action
        if self.action_name != msg.name.lower():
            return

        rospy.loginfo('[throw] Action request received')
        self.action_id = msg.action_id

        client = actionlib.SimpleActionClient(self.action_server_name, PlaceAction)
        client.wait_for_server()
        goal = self.get_action_message(msg)

        # calling the actionlib server and waiting for the execution to end
        rospy.loginfo('[throw] Sending actionlib goal to %s' % self.action_server_name)
        client.send_goal(goal)
        client.wait_for_result(rospy.Duration.from_sec(int(self.action_timeout)))
        result = client.get_result()

        if result and result.success:
            rospy.loginfo('[throw] Updating the knowledge base')
            self.update_knowledge_base(goal.pose)
            self.send_action_feedback(True)
        else:
            self.send_action_feedback(False)

    def get_action_message(self, rosplan_action_msg):
        '''Reads the action parameters and uses them to initialise an actionlib message.
        '''
        goal = PlaceGoal()
        for param in rosplan_action_msg.parameters:
            if param.key == 'obj':
                self.obj = param.value
            elif param.key == 'throwing_target':
                self.throwing_target = param.value
            elif param.key == 'bot':
                self.robot_name = param.value

        goal.pose = self.get_throwing_pose()
        return goal

    def get_throwing_pose(self):
        throwing_target = self.kb_interface.get_obj_instance(self.throwing_target, Object._type)
        throwing_target.pose.header.stamp = rospy.Time(0)
        throwing_target.pose = self.tf_listener.transformPose(self.frame_id, throwing_target.pose)
        throwing_target_obj = ConverterFactory.convert_ros_msg(throwing_target)

        obj_to_throw = self.kb_interface.get_obj_instance(self.obj, Object._type)
        obj_to_throw.pose.header.frame_id = self.frame_id
        manipulated_obj = ConverterFactory.convert_ros_msg(obj_to_throw)

        action_model = Action(action_name='Throw')
        number_of_samples = 10

        robot_pose = PoseStamped(Header(1, rospy.Time.now(), self.frame_id),
                                 Pose(Point(0., 0., 0.), Quaternion(0., 0., 0., 1.)))
        robot_pose = ConverterFactory.convert_ros_msg(robot_pose)
        model_results = action_model.get_execution_guidelines(data_count=number_of_samples,
                                                              frame_id=self.frame_id,
                                                              manipulated_object=manipulated_obj,
                                                              target_object=throwing_target_obj,
                                                              robot_pose=robot_pose)
        candidate_pose_idx = np.argmax(model_results['success_probabilities'])
        candidate_pose = model_results['candidate_poses'][candidate_pose_idx]
        candidate_pose = ConverterFactory.convert_to_ros_msg(candidate_pose)
        return candidate_pose

    def update_knowledge_base(self, new_object_pose):
        '''Updates the knowledge base with the following facts:
        * the object is in the throwing target
        * the robot's gripper is empty
        * the robot is not holding the object anymore
        '''
        facts_to_add = [('in', [('obj', self.obj), ('storing_obj', self.throwing_target)]),
                        ('empty_gripper', [('bot', self.robot_name)])]
        facts_to_remove = [('holding', [('bot', self.robot_name), ('obj', self.obj)])]
        self.kb_interface.update_kb(facts_to_add, facts_to_remove)

        # we update the location of the object
        thrown_object = self.kb_interface.get_obj_instance(self.obj, Object._type)
        new_object_pose.header.stamp = rospy.Time.now()
        new_object_pose.pose.position.z = 0.
        thrown_object.pose = new_object_pose
        self.kb_interface.update_obj_instance(self.obj, thrown_object)

if __name__ == '__main__':
    rospy.init_node('throw_client')
    try:
        ThrowClient()
    except rospy.ROSInterruptException:
        pass
