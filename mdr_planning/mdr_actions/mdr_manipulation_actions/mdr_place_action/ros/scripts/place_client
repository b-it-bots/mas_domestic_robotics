#!/usr/bin/env python
import numpy as np
import rospy
import tf
import actionlib

from std_msgs.msg import Header
from geometry_msgs.msg import Point, Quaternion, Pose, PoseStamped, PointStamped

import rosplan_dispatch_msgs.msg as plan_dispatch_msgs
import rosplan_knowledge_msgs.srv as rosplan_srvs
import diagnostic_msgs.msg as diag_msgs
from mcr_perception_msgs.msg import Object, Plane

from action_execution.action import Action
from action_execution.utils.configuration import Configuration
from ae_ros_message_converter.converter_factory import ConverterFactory

from mdr_rosplan_interface.action_client_base import ActionClientBase
from mdr_place_action.msg import PlaceAction, PlaceGoal

class PlaceClient(ActionClientBase):
    def __init__(self):
        super(PlaceClient, self).__init__()

        self.obj_plane = None
        self.obj = None
        self.frame_id = rospy.get_param('~placing_pose_frame', 'base_link')
        self.tf_listener = tf.TransformListener()

        while not rospy.is_shutdown():
            rospy.sleep(0.1)

    def call_action(self, msg):
        # we only react to calls to this action
        if self.action_name != msg.name.lower():
            return

        rospy.loginfo('[PLACE] Action request received')
        self.action_id = msg.action_id

        client = actionlib.SimpleActionClient(self.action_server_name, PlaceAction)
        client.wait_for_server()
        goal = self.get_action_message(msg)

        # calling the actionlib server and waiting for the execution to end
        rospy.loginfo('[PLACE] Sending actionlib goal to %s' % self.action_server_name)
        client.send_goal(goal)
        client.wait_for_result(rospy.Duration.from_sec(int(self.action_timeout)))
        result = client.get_result()

        if result and result.success:
            rospy.loginfo('[PLACE] Updating the knowledge base')
            self.update_knowledge_base(goal.pose)
            self.send_action_feedback(True)
        else:
            self.send_action_feedback(False)

    def get_action_message(self, rosplan_action_msg):
        '''Reads the action parameters and uses them to initialise an actionlib message.
        '''
        goal = PlaceGoal()
        for param in rosplan_action_msg.parameters:
            if param.key == 'obj':
                self.obj = param.value
            elif param.key == 'plane':
                self.obj_plane = param.value
            elif param.key == 'bot':
                self.robot_name = param.value

        goal.pose = self.get_placing_pose()
        return goal

    def get_placing_pose(self):
        obj_config = Configuration()
        obj_config.frame_id = self.frame_id

        surface_object_names = self.get_surface_object_names(self.obj_plane)
        surface_objects = self.get_surface_object(surface_object_names)
        for obj in surface_objects:
            obj.pose.header.stamp = rospy.Time(0)
            obj.pose = self.tf_listener.transformPose(self.frame_id, obj.pose)
            obj_config.static_objs.append(ConverterFactory.convert_ros_msg(obj))

        manipulated_obj = self.get_object_by_name(self.obj)
        manipulated_obj.pose.header.frame_id = self.frame_id
        obj_config.manipulated_obj = ConverterFactory.convert_ros_msg(manipulated_obj)

        surface_plane = self.get_surface_by_name(self.obj_plane)

        # we convert the surface center point to the desired frame
        surface_plane_point = PointStamped()
        surface_plane_point.header = surface_plane.header
        surface_plane_point.point.x = surface_plane.plane_point.x
        surface_plane_point.point.y = surface_plane.plane_point.y
        surface_plane_point.point.z = surface_plane.plane_point.z

        surface_plane_point = self.tf_listener.transformPoint(self.frame_id, surface_plane_point)
        surface_plane.plane_point.x = surface_plane_point.point.x
        surface_plane.plane_point.y = surface_plane_point.point.y
        surface_plane.plane_point.z = surface_plane_point.point.z

        # we convert the min point of the surface to the desired frame
        surface_plane_min_point = PointStamped()
        surface_plane_min_point.header = surface_plane.header
        surface_plane_min_point.point.x = surface_plane.limits.min_x
        surface_plane_min_point.point.y = surface_plane.limits.min_y
        surface_plane_min_point.point.z = surface_plane.plane_point.z

        surface_plane_min_point = self.tf_listener.transformPoint(self.frame_id, surface_plane_min_point)
        surface_plane.limits.min_x = surface_plane_min_point.point.x
        surface_plane.limits.min_y = surface_plane_min_point.point.y

        # we convert the max point of the surface to the desired frame
        surface_plane_max_point = PointStamped()
        surface_plane_max_point.header = surface_plane.header
        surface_plane_max_point.point.x = surface_plane.limits.max_x
        surface_plane_max_point.point.y = surface_plane.limits.max_y
        surface_plane_max_point.point.z = surface_plane.plane_point.z

        surface_plane_max_point = self.tf_listener.transformPoint(self.frame_id, surface_plane_max_point)
        surface_plane.limits.max_x = surface_plane_max_point.point.x
        surface_plane.limits.max_y = surface_plane_max_point.point.y

        obj_config.surface = ConverterFactory.convert_ros_msg(surface_plane)

        # TODO: find the right action context for executing the action
        action_model = Action(action_name='release')
        number_of_samples = 10

        robot_pose = PoseStamped(Header(1, rospy.Time.now(), self.frame_id),
                                 Pose(Point(0., 0., 0.), Quaternion(0., 0., 0., 1.)))
        robot_pose = ConverterFactory.convert_ros_msg(robot_pose)
        model_results = action_model.get_execution_guidelines(data_count=number_of_samples,
                                                              frame_id=self.frame_id,
                                                              manipulated_object=obj_config.manipulated_obj,
                                                              objects_on_surface=obj_config.static_objs,
                                                              surface=obj_config.surface,
                                                              robot_pose=robot_pose)
        candidate_pose_idx = np.argmax(model_results['success_probabilities'])
        candidate_pose = model_results['candidate_poses'][candidate_pose_idx]
        candidate_pose = ConverterFactory.convert_to_ros_msg(candidate_pose)
        return candidate_pose

    def get_surface_object_names(self, surface_name):
        surface_objects = list()
        request = rosplan_srvs.GetAttributeServiceRequest()
        request.predicate_name = 'on'
        result = self.attribute_fetching_client(request)
        for item in result.attributes:
            object_on_desired_surface = False
            object_name = ''
            if not item.is_negative:
                for param in item.values:
                    if param.key == 'plane' and param.value == surface_name:
                        object_on_desired_surface = True
                    elif param.key == 'obj':
                        object_name = param.value
            if object_on_desired_surface:
                surface_objects.append(object_name)
        return surface_objects

    def get_surface_object(self, surface_objects):
        objects = list()
        for obj_name in surface_objects:
            obj = self.get_object_by_name(obj_name)
            if obj is not None:
                objects.append(obj)
        return objects

    def get_object_by_name(self, obj_name):
        try:
            obj = self.msg_store_client.query_named(obj_name, Object._type)[0]
            return obj
        except:
            rospy.logerr('Error retriving knowledge about %s', obj_name)
            return None

    def get_surface_by_name(self, surface_name):
        try:
            surface = self.msg_store_client.query_named(surface_name, Plane._type)[0]
            return surface
        except:
            rospy.logerr('Error retriving knowledge about %s', surface_name)
            return None

    def update_knowledge_base(self, new_object_pose):
        # we remove the fact that the robot is holding the object from the knowledge base
        request = rosplan_srvs.KnowledgeUpdateServiceRequest()
        request.update_type = 2
        request.knowledge.knowledge_type = 1
        request.knowledge.attribute_name = 'holding'

        arg_msg = diag_msgs.KeyValue()
        arg_msg.key = 'bot'
        arg_msg.value = self.robot_name
        request.knowledge.values.append(arg_msg)

        arg_msg = diag_msgs.KeyValue()
        arg_msg.key = 'obj'
        arg_msg.value = self.obj
        request.knowledge.values.append(arg_msg)

        self.knowledge_update_client(request)

        # we add the fact that the robot's gripper is empty to the knowledge base
        request = rosplan_srvs.KnowledgeUpdateServiceRequest()
        request.update_type = 0
        request.knowledge.knowledge_type = 1
        request.knowledge.attribute_name = 'empty_gripper'

        arg_msg = diag_msgs.KeyValue()
        arg_msg.key = 'bot'
        arg_msg.value = self.robot_name
        request.knowledge.values.append(arg_msg)

        self.knowledge_update_client(request)

        # we add the fact that the object is on the surface to the knowledge base
        request = rosplan_srvs.KnowledgeUpdateServiceRequest()
        request.update_type = 0
        request.knowledge.knowledge_type = 1
        request.knowledge.attribute_name = 'on'

        arg_msg = diag_msgs.KeyValue()
        arg_msg.key = 'obj'
        arg_msg.value = self.obj
        request.knowledge.values.append(arg_msg)

        arg_msg = diag_msgs.KeyValue()
        arg_msg.key = 'plane'
        arg_msg.value = self.obj_plane
        request.knowledge.values.append(arg_msg)

        self.knowledge_update_client(request)

        # we update the location of the object
        placed_object = self.get_object_by_name(self.obj)
        new_object_pose.header.stamp = rospy.Time.now()
        placed_object.pose = new_object_pose
        self.msg_store_client.update_named(self.obj, placed_object)

if __name__ == '__main__':
    rospy.init_node('place_client')
    try:
        PlaceClient()
    except rospy.ROSInterruptException:
        pass
