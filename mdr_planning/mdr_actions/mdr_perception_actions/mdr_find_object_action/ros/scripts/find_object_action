#!/usr/bin/env python
import rospy
import actionlib

from mdr_find_object_action.msg import FindObjectAction
from mdr_find_object_action.action_states import FindObjectSM

class FindObjectServer(object):
    '''A server exposing an action for locating objects.

    The server expects the following parameters to be made available on the ROS parameter server:
    * ontology_url: URL of a domestic ontology file
    * ontology_class_prefix: Prefix of the classes in the ontology
    * retry_count_on_failure: Number of times the search should be retried
                              if it fails the first time
    * timeout_s: Timeout (in seconds) for the action execution

    @author Alex Mitrevski
    @contact aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        ontology_url = rospy.get_param('~ontology_url', '')
        ontology_class_prefix = rospy.get_param('~ontology_class_prefix', '')
        retry_count_on_failure = int(rospy.get_param('~retry_count_on_failure', 0))
        timeout_s = float(rospy.get_param('~timeout_s', 120.))
        if not ontology_url:
            rospy.logerr('[find_object] Ontology url not specified')

        if not ontology_class_prefix:
            rospy.logerr('[find_object] Ontology class prefix not specified')

        rospy.loginfo('[find_object] Initialising state machine')
        self.action_sm = FindObjectSM(ontology_url=ontology_url,
                                      ontology_class_prefix=ontology_class_prefix,
                                      number_of_retries=retry_count_on_failure,
                                      timeout=timeout_s)
        rospy.loginfo('[find_object] State machine initialised')

        self.action_server = actionlib.SimpleActionServer('find_object_server',
                                                          FindObjectAction,
                                                          self.execute, False)
        self.action_server.start()
        rospy.loginfo('find_object action server ready')

    def execute(self, goal):
        rospy.loginfo('[find_object] Received an action request')
        self.action_sm.goal = goal
        self.action_sm.result = None
        self.action_sm.execution_requested = True
        while not self.action_sm.result:
            rospy.sleep(0.05)
        self.action_server.set_succeeded(self.action_sm.result)

if __name__ == '__main__':
    rospy.init_node('find_object_server')
    find_object_server = FindObjectServer()
    try:
        find_object_server.action_sm.run()
        while find_object_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(find_object_server.action_sm.name))
        find_object_server.action_sm.stop()
