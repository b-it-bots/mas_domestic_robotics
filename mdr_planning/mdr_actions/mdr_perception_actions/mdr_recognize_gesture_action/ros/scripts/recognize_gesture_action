#!/usr/bin/env python
import rospy
import actionlib

from mdr_recognize_gesture_action.msg import RecognizeGestureAction
from mdr_recognize_gesture_action.action_states import RecognizeGestureSM


class RecognizeGestureServer(object):
    '''A server exposing an action for recognizing bodily gestures.

    The server expects the following parameters to be made available on the ROS parameter server:
    * gesture_type: Name of the gesture. Providing this bypasses gesture classification (default: 'pointing')

    '''
    def __init__(self):
        gesture_type = rospy.get_param('~gesture_type', None)
        openpose_models_dir = rospy.get_param('~openpose_models_dir', '/home/lucy/.models/openpose_models/')
        pointcloud_topic = rospy.get_param('~cloud_topic', '/mdr_perception/rectified_points')
        object_detection_server = rospy.get_param('~object_detection_server', '/object_detection_server')

        rospy.loginfo('[recognize_gesture] Initialising state machine')
        self.action_sm = RecognizeGestureSM(gesture_type=gesture_type,
                                            openpose_models_dir=openpose_models_dir,
                                            object_detection_server=object_detection_server,
                                            pointcloud_topic=pointcloud_topic)
        rospy.loginfo('[recognize_gesture] State machine initialised')

        self.action_server = actionlib.SimpleActionServer('recognize_gesture_server',
                                                          RecognizeGestureAction,
                                                          self.execute, False)
        self.action_server.start()
        rospy.loginfo('recognize_gesture action server ready')

    def execute(self, goal):
        rospy.loginfo('[recognize_gesture] Received an action request')
        self.action_sm.goal = goal
        self.action_sm.result = None
        self.action_sm.execution_requested = True
        while not self.action_sm.result:
            rospy.sleep(0.05)
        self.action_server.set_succeeded(self.action_sm.result)

if __name__ == '__main__':
    rospy.init_node('recognize_gesture_server')
    recognize_gesture_server = RecognizeGestureServer()
    try:
        recognize_gesture_server.action_sm.run()
        while recognize_gesture_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(recognize_gesture_server.action_sm.name))
        recognize_gesture_server.action_sm.stop()
