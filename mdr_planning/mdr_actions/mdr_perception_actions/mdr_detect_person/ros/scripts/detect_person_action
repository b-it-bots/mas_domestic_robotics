#!/usr/bin/env python
import rospy
import smach
# action lib
from smach_ros import ActionServerWrapper, IntrospectionServer
from mdr_detect_person.msg import DetectPersonAction
from mdr_detect_person.action_states import SetupDetectPerson, DetectPerson, SetActionLibResult

class DetectPersonSkill(smach.StateMachine):
    def __init__(self, timeout=10):
        smach.StateMachine.__init__(self,
                outcomes=['OVERALL_SUCCESS', 'OVERALL_FAILED', 'PREEMPTED'],
                input_keys=['detect_person_goal'],
                output_keys=['detect_person_feedback', 'detect_person_result'])

        detection_model_path = rospy.get_param('~config_file', '')
        image_topic = rospy.get_param('~image_topic', '/cam3d/rgb/image_raw')

        with self:
            smach.StateMachine.add('SETUP_DETECT_PERSON', SetupDetectPerson(),
                                   transitions = {'succeeded': 'DETECT_PERSON',
                                                  'failed': 'SETUP_DETECT_PERSON'})

            smach.StateMachine.add('DETECT_PERSON',
                                   DetectPerson(image_topic=image_topic,
                                                detection_model_path=detection_model_path),
                                   transitions = {'succeeded': 'SET_ACTION_LIB_SUCCESS',
                                                  'failed': 'SET_ACTION_LIB_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_FAILED', SetActionLibResult(False),
                                   transitions = {'succeeded': 'OVERALL_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_SUCCESS', SetActionLibResult(True),
                                   transitions = {'succeeded': 'OVERALL_SUCCESS'})

if __name__ == '__main__':
    rospy.init_node('detect_person_server')

    # construct state machine
    sm = DetectPersonSkill()

    # smach viewer
    sis = IntrospectionServer('detect_person_smach_viewer', sm, '/DETECT_PERSON_SMACH_VIEWER')
    sis.start()

    asw = ActionServerWrapper(
        server_name = 'detect_person_server',
        action_spec = DetectPersonAction,
        wrapped_container = sm,
        succeeded_outcomes = ['OVERALL_SUCCESS'],
        aborted_outcomes = ['OVERALL_FAILED'],
        preempted_outcomes = ['PREEMPTED'],
        goal_key = 'detect_person_goal',
        feedback_key = 'detect_person_feedback',
        result_key = 'detect_person_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
