#!/usr/bin/env python
import rospy
import smach

from smach_ros import ActionServerWrapper, IntrospectionServer

from mdr_gender_recognition.msg import GenderRecognitionAction 
from mdr_gender_recognition.action_states import (SetupGenderRecognition, RecognizeGenders,
                                                     SetActionLibResult)


class GenderRecognitionSkill(smach.StateMachine):
    def __init__(self, timeout=10):
        smach.StateMachine.__init__(self,
                                    outcomes=['OVERALL_SUCCESS',
                                              'OVERALL_FAILED', 'PREEMPTED'],
                                    input_keys=['gender_recognition_goal'],
                                    output_keys=['gender_recognition_feedback',
                                                 'gender_recognition_result'])

        gender_model_path = rospy.get_param('~gender_model_path', '')
        image_topic = rospy.get_param('~image_topic', '/cam3d/rgb/image_raw')
        labels = {0: 'woman', 1: 'man'}
        image_size = (64, 64, 1)

        with self:
            smach.StateMachine.add('SETUP_GENDER_RECOGNITION', SetupGenderRecognition(),
                                   transitions={'succeeded': 'RECOGNIZE_GENDERS',
                                                'failed': 'SETUP_GENDER_RECOGNITION'})

            smach.StateMachine.add('RECOGNIZE_GENDERS',
                                   RecognizeGenders(gender_model_path=gender_model_path,
                                                 image_topic=image_topic,
                                                 labels=labels, image_size=image_size),
                                   transitions={'succeeded': 'SET_ACTION_LIB_SUCCESS',
                                                'failed': 'SET_ACTION_LIB_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_FAILED',
                                   SetActionLibResult(False),
                                   transitions={'succeeded': 'OVERALL_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_SUCCESS',
                                   SetActionLibResult(True),
                                   transitions={'succeeded': 'OVERALL_SUCCESS'})


if __name__ == '__main__':
    rospy.init_node('gender_recognition_server')

    # construct state machine
    sm = GenderRecognitionSkill()

    # smach viewer
    sis = IntrospectionServer('gender_recognition_smach_viewer', sm,
                              '/gender_recognition_SMACH_VIEWER')
    sis.start()

    asw = ActionServerWrapper(
        server_name='gender_recognition_server',
        action_spec=GenderRecognitionAction,
        wrapped_container=sm,
        succeeded_outcomes=['OVERALL_SUCCESS'],
        aborted_outcomes=['OVERALL_FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='gender_recognition_goal',
        feedback_key='gender_recognition_feedback',
        result_key='gender_recognition_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()

