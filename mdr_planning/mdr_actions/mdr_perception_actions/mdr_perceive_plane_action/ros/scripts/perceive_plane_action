#!/usr/bin/env python
import rospy
import smach
from smach_ros import ActionServerWrapper, IntrospectionServer
from mas_perception_libs import Constant
from mdr_perceive_plane_action.msg import PerceivePlaneAction
from mdr_perceive_plane_action.action_states import SetActionLibResult, DetectObjects, RecognizeObjects


class PerceivePlaneSkill(smach.StateMachine):
    def __init__(self, detection_action_name, target_frame, recog_service_name, recog_model_name,
                 preprocess_input_module):
        smach.StateMachine.__init__(self, outcomes=['OVERALL_SUCCESS', 'OVERALL_FAILED', 'PREEMPTED'],
                                    input_keys=['perceive_plane_goal'],
                                    output_keys=['perceive_plane_feedback', 'perceive_plane_result'])

        with self:
            smach.StateMachine.add('DETECT_OBJECTS',
                                   DetectObjects(detection_action_name, target_frame),
                                   transitions={Constant.SUCCESS: 'RECOGNIZE_OBJECTS',
                                                Constant.TIMEOUT: 'SET_ACTION_LIB_FAILURE',
                                                Constant.FAILURE: 'SET_ACTION_LIB_FAILURE'})

            smach.StateMachine.add('RECOGNIZE_OBJECTS', RecognizeObjects(recog_service_name, recog_model_name,
                                                                         preprocess_input_module),
                                   transitions={Constant.SUCCESS: 'SET_ACTION_LIB_SUCCESS',
                                                Constant.FAILURE: 'SET_ACTION_LIB_FAILURE'})

            smach.StateMachine.add('SET_ACTION_LIB_SUCCESS', SetActionLibResult(True),
                                   transitions={Constant.SUCCESS: 'OVERALL_SUCCESS'})

            smach.StateMachine.add('SET_ACTION_LIB_FAILURE', SetActionLibResult(False),
                                   transitions={Constant.SUCCESS: 'OVERALL_FAILED'})


def main():
    rospy.init_node('~perceive_plane_server')
    # detection
    detection_action_name = rospy.get_param('~detection_action_name', '')
    if not detection_action_name:
        raise RuntimeError('no detection action server specified')

    # recognition
    recognition_service_name = rospy.get_param('~recognition_service_name', '/mdr_perception/recognize_image')
    recognition_model_name = rospy.get_param('~recognition_model_name', 'athome_xception_v1')
    preprocess_input_module = rospy.get_param('~preprocess_input_module', None)

    target_frame = rospy.get_param("~target_frame")

    # Construct state machine
    sm = PerceivePlaneSkill(detection_action_name, target_frame, recognition_service_name, recognition_model_name,
                            preprocess_input_module)

    # smach viewer
    sis = IntrospectionServer('perceive_plane_smach_viewer', sm, '/PERCEIVE_PLANE_SMACH_VIEWER')
    sis.start()

    # Construct action server wrapper
    asw = ActionServerWrapper(
        server_name='perceive_plane_server',
        action_spec=PerceivePlaneAction,
        wrapped_container=sm,
        succeeded_outcomes=['OVERALL_SUCCESS'],
        aborted_outcomes=['OVERALL_FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='perceive_plane_goal',
        feedback_key='perceive_plane_feedback',
        result_key='perceive_plane_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()


if __name__ == '__main__':
    main()
