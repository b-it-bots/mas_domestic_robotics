#!/usr/bin/env python
import rospy
import actionlib

from mdr_perceive_plane_action.msg import PerceivePlaneAction
from mdr_perceive_plane_action.action_states import PerceivePlaneSM

class PerceivePlaneServer(object):
    '''A server exposing an action for detecting objects on a plane.

    The server expects the following parameters to be made available on the ROS parameter server:
    * detection_action_name: Name of an action server used for object detection
    * recognition_service_name: Name of an image recognition service for classifying object
    * recognition_model_name: Name of an image classification model
    * preprocess_input_module: Name of a module containing an image preprocessing function
                               to be executed on images before inference
    * target_frame: Name of the reference frame the object and plane poses will be
                    transformed to (default: '/base_link')

    @author Minh Nguyen, Alex Mitrevski
    @contact minh.nguyen@smail.inf.h-brs.de, aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        detection_action_name = rospy.get_param('~detection_action_name', '/base_link')
        if not detection_action_name:
            raise RuntimeError('[perceive_plane] no detection action server specified')
        recognition_service_name = rospy.get_param('~recognition_service_name', '/mdr_perception/recognize_image')
        recognition_model_name = rospy.get_param('~recognition_model_name', 'athome_xception_v1')
        preprocess_input_module = rospy.get_param('~preprocess_input_module', None)
        target_frame = rospy.get_param('~target_frame', '')

        rospy.loginfo('[perceive_plane] Initialising state machine')
        self.action_sm = PerceivePlaneSM(detection_service_proxy=detection_action_name,
                                         recog_service_name=recognition_service_name,
                                         recog_model_name=recognition_model_name,
                                         preprocess_input_module=preprocess_input_module,
                                         target_frame=target_frame)
        rospy.loginfo('[perceive_plane] State machine initialised')

        self.action_server = actionlib.SimpleActionServer('perceive_plane_server',
                                                          PerceivePlaneAction,
                                                          self.execute, False)
        self.action_server.start()
        rospy.loginfo('perceive_plane action server ready')

    def execute(self, goal):
        rospy.loginfo('[perceive_plane] Received an action request')
        self.action_sm.goal = goal
        self.action_sm.result = None
        self.action_sm.execution_requested = True
        while not self.action_sm.result:
            rospy.sleep(0.05)
        self.action_server.set_succeeded(self.action_sm.result)

if __name__ == '__main__':
    rospy.init_node('perceive_plane_server')
    perceive_plane_server = PerceivePlaneServer()
    try:
        perceive_plane_server.action_sm.run()
        while perceive_plane_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(perceive_plane_server.action_sm.name))
        perceive_plane_server.action_sm.stop()
