#!/usr/bin/env python
import rospy
import actionlib

import rosplan_dispatch_msgs.msg as plan_dispatch_msgs
from mcr_perception_msgs.msg import Plane, Object
from mdr_rosplan_interface.action_client_base import ActionClientBase
from mdr_perceive_plane_action.msg import PerceivePlaneAction, PerceivePlaneGoal

class PerceivePlaneClient(ActionClientBase):
    '''Defines a client for a plane scanning action.

    @author Minh Nguyen, Alex Mitrevski
    @contact minh.nguyen@smail.inf.h-brs.de, aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        super(PerceivePlaneClient, self).__init__()
        self.clear_plane_memory = rospy.get_param('~clear_plane_memory', False)
        while not rospy.is_shutdown():
            rospy.sleep(0.1)

    def call_action(self, msg):
        # we only react to calls to this action
        if self.action_name != msg.name.lower():
            return

        self.action_id = msg.action_id

        client = actionlib.SimpleActionClient(self.action_server_name, PerceivePlaneAction)
        client.wait_for_server()
        goal = self.get_action_message(msg)

        # calling the actionlib server and waiting for the execution to end
        rospy.loginfo('[PERCEIVE_PLANE] Sending action lib goal to' + self.action_server_name +
                      ', plane_config: ' + goal.plane_config)
        client.send_goal(goal)
        client.wait_for_result(rospy.Duration.from_sec(int(self.action_timeout)))
        result = client.get_result()

        if result and result.success:
            rospy.loginfo('[PERCEIVE_PLANE] Sending actionlib goal to %s' % self.action_server_name)
            self.update_knowledge_base(goal.plane_frame_prefix, result.recognized_planes)
            self.send_action_feedback(True)
        else:
            self.send_action_feedback(False)

    def get_action_message(self, rosplan_action_msg):
        '''Reads the action parameters and uses them to initialise an actionlib message.
        '''
        goal = PerceivePlaneGoal()
        for param in rosplan_action_msg.parameters:
            if param.key == 'plane':
                goal.plane_config = param.value
                goal.plane_frame_prefix = param.value
            elif param.key == 'bot':
                self.robot_name = param.value
        return goal

    def update_knowledge_base(self, plane_prefix, plane_list):
        '''Updates the knowledge base with the following facts:
        * each of the detected planes is now explored, so it's not unexplored anymore
        * each object on each of the detected plane is on the plane and has
          the recognised category
        '''
        facts_to_add = []
        facts_to_remove = []
        objects_to_add = []
        for i, plane in enumerate(plane_list.planes):
            if self.clear_plane_memory:
                self.__delete_plane_from_kb(plane.name)

            facts_to_add.append(('explored', [('plane', plane.name)]))
            facts_to_remove.append(('unexplored', [('plane', plane.name)]))
            objects_to_add.append((plane.name, plane))

            # we update the list of facts and objects to add with the detected objects
            for obj in plane.object_list.objects:
                # we set a unique name for each object
                obj_name = obj.name + '_' + str(i)
                obj.name = obj_name

                facts_to_add.append(('on', [('obj', obj_name), ('plane', plane.name)]))
                facts_to_add.append(('object_category', [('obj', obj_name), ('cat', obj.category)]))
                objects_to_add.append((obj_name, obj))

        # we finally update the knowledge base
        self.kb_interface.update_kb(facts_to_add, facts_to_remove)
        self.kb_interface.insert_objects(objects_to_add)

    def __delete_plane_from_kb(self, plane_name):
        '''Removes the plane with the given name and all objects on it
        from the knowledge base.

        Keyword arguments:
        plane_name -- string indicating the name of a plane

        '''
        facts_to_remove = [('explored', [('plane', plane_name)])]
        objects_to_remove = [(plane_name, Plane._type)]

        # we update the lists of facts and objects to remove
        # with the objects that on the plane
        plane_objects = self.kb_interface.get_surface_object_names(plane_name)
        for obj_name in plane_objects:
            fact = ('on', [('obj', obj_name), ('plane', plane_name)])
            facts_to_remove.append(fact)
            objects_to_remove.append((obj_name, Object._type))

        # we finally remove the facts and objects from the knowledge base
        self.kb_interface.remove_facts(facts_to_remove)
        self.kb_interface.remove_objects(objects_to_remove)

if __name__ == '__main__':
    rospy.init_node('perceive_plane_client')
    try:
        PerceivePlaneClient()
    except rospy.ROSInterruptException:
        pass
