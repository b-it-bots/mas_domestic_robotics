#!/usr/bin/env python
import rospy
import smach

import smach_ros
from mdr_move_base_action.msg import MoveBaseAction, MoveBaseFeedback, MoveBaseResult
from mdr_move_base_action.action_states import SetupMoveBase, ApproachPose, SetActionLibResult

def main():
    rospy.init_node('mdr_move_base_action_server')

    move_base_server = rospy.get_param('~move_base_server', '')
    pose_description_file = rospy.get_param('~pose_description_file', '')
    pose_frame = rospy.get_param('~pose_frame', '')
    arm_name = rospy.get_param('~arm_name', 'arm')
    safe_arm_joint_config = rospy.get_param('~safe_arm_joint_config', 'folded')

    sm = smach.StateMachine(outcomes=['OVERALL_SUCCESS', 'OVERALL_FAILED'],
                            input_keys=['move_base_goal'],
                            output_keys=['move_base_feedback', 'move_base_result'])

    with sm:
        smach.StateMachine.add('SETUP_MOVE_BASE',
                               SetupMoveBase(safe_arm_joint_config=safe_arm_joint_config,
                                             arm_name=arm_name),
                               transitions={'succeeded': 'MOVE_BASE_TO_DESTINATION',
                                            'failed': 'SETUP_MOVE_BASE'})

        smach.StateMachine.add('MOVE_BASE_TO_DESTINATION',
                               ApproachPose(move_base_server=move_base_server,
                                            pose_description_file=pose_description_file,
                                            pose_frame=pose_frame),
                               transitions={'succeeded': 'SET_ACTION_LIB_SUCCESS',
                                            'failed': 'SET_ACTION_LIB_FAILED'})

        smach.StateMachine.add('SET_ACTION_LIB_FAILED', SetActionLibResult(False),
                               transitions={'succeeded': 'OVERALL_FAILED'})

        smach.StateMachine.add('SET_ACTION_LIB_SUCCESS', SetActionLibResult(True),
                               transitions={'succeeded': 'OVERALL_SUCCESS'})

    asw = smach_ros.ActionServerWrapper(
        server_name='move_base_server',
        action_spec=MoveBaseAction,
        wrapped_container=sm,
        succeeded_outcomes=['OVERALL_SUCCESS'],
        aborted_outcomes=['OVERALL_FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='move_base_goal',
        feedback_key='move_base_feedback',
        result_key='move_base_result')

    asw.run_server()
    rospy.spin()

if __name__ == '__main__':
    main()
