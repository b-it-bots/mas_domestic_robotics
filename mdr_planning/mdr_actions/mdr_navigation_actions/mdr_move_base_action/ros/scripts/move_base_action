#!/usr/bin/env python
import rospy
import actionlib

from mdr_move_base_action.msg import MoveBaseAction
from mdr_move_base_action.action_states import MoveBaseSM

class MoveBaseServer(object):
    '''A server exposing a go to action.

    The server expects the following parameters to be made available on the ROS parameter server:
    * move_base_server: Name of the default move_base server (default: '/move_base')
    * pose_description_file: Name of a yaml file in which named goals are mapped
                             to actual coordinates
    * pose_frame: Name of the frame in which the poses in pose_description_file
                  are given (default: 'map')
    * safe_arm_joint_config: Name of a configuration specified in which the robot can
                             safely move around the environment (default: 'folded')
    * move_arm_server: Name of the move_arm action server (default: 'move_arm_server')

    @author Alex Mitrevski
    @contact aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        safe_arm_joint_config = rospy.get_param('~safe_arm_joint_config', 'folded')
        move_arm_server = rospy.get_param('~move_arm_server', 'move_arm_server')
        move_base_server = rospy.get_param('~move_base_server', '')
        pose_description_file = rospy.get_param('~pose_description_file', '')
        pose_frame = rospy.get_param('~pose_frame', '')

        rospy.loginfo('[move_base] Initialising state machine')
        self.action_sm = MoveBaseSM(safe_arm_joint_config=safe_arm_joint_config,
                                    move_arm_server=move_arm_server,
                                    move_base_server=move_base_server,
                                    pose_description_file=pose_description_file,
                                    pose_frame=pose_frame)
        rospy.loginfo('[move_base] State machine initialised')

        self.action_server = actionlib.SimpleActionServer('move_base_server',
                                                          MoveBaseAction,
                                                          self.execute, False)
        self.action_server.start()
        rospy.loginfo('move_base action server ready')

    def execute(self, goal):
        rospy.loginfo('[move_base] Received an action request')
        self.action_sm.goal = goal
        self.action_sm.result = None
        self.action_sm.execution_requested = True
        while not self.action_sm.result:
            rospy.sleep(0.05)
        self.action_server.set_succeeded(self.action_sm.result)

if __name__ == '__main__':
    rospy.init_node('move_base_server')
    move_base_server = MoveBaseServer()
    try:
        move_base_server.action_sm.run()
        while move_base_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(move_base_server.action_sm.name))
        move_base_server.action_sm.stop()
