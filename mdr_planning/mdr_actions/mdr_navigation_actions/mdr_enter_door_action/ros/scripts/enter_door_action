#!/usr/bin/env python
import rospy
import smach

from smach_ros import ActionServerWrapper, IntrospectionServer

from mdr_enter_door_action.msg import EnterDoorAction
from mdr_enter_door_action.action_states import SetupEnterDoor, WaitForDoor, EnterDoor, SetActionLibResult

class EnterDoorSkill(smach.StateMachine):
    def __init__(self, timeout=10):
        smach.StateMachine.__init__(self,
                                    outcomes=['OVERALL_SUCCESS', 'OVERALL_FAILED', 'PREEMPTED'],
                                    input_keys=['enter_door_goal'],
                                    output_keys=['enter_door_feedback', 'enter_door_result'])

        movement_duration = float(rospy.get_param('~movement_duration', 15.))
        speed = float(rospy.get_param('~speed', 0.15))
        move_forward_server = rospy.get_param('~move_forward_server', 'move_forward_server')

        with self:
            smach.StateMachine.add('SETUP_ENTER_DOOR', SetupEnterDoor(),
                                   transitions={'succeeded': 'WAIT_FOR_DOOR',
                                                'failed': 'SETUP_ENTER_DOOR'})

            smach.StateMachine.add('WAIT_FOR_DOOR', WaitForDoor(),
                                   transitions={'succeeded': 'ENTER_DOOR',
                                                'waiting': 'WAIT_FOR_DOOR'})

            smach.StateMachine.add('ENTER_DOOR', EnterDoor(move_forward_server=move_forward_server,
                                                           movement_duration=movement_duration,
                                                           speed=speed),
                                   transitions={'succeeded': 'SET_ACTION_LIB_SUCCESS',
                                                'failed': 'SET_ACTION_LIB_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_FAILED', SetActionLibResult(False),
                                   transitions={'succeeded': 'OVERALL_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_SUCCESS', SetActionLibResult(True),
                                   transitions={'succeeded': 'OVERALL_SUCCESS'})

if __name__ == '__main__':
    rospy.init_node('enter_door_server')

    # construct state machine
    sm = EnterDoorSkill()

    # smach viewer
    sis = IntrospectionServer('enter_door_smach_viewer', sm, '/enter_door_SMACH_VIEWER')
    sis.start()

    asw = ActionServerWrapper(
        server_name='enter_door_server',
        action_spec=EnterDoorAction,
        wrapped_container=sm,
        succeeded_outcomes=['OVERALL_SUCCESS'],
        aborted_outcomes=['OVERALL_FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='enter_door_goal',
        feedback_key='enter_door_feedback',
        result_key='enter_door_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
