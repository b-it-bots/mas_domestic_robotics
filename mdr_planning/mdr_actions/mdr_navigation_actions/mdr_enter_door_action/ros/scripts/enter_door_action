#!/usr/bin/env python
import rospy
import actionlib

from mdr_enter_door_action.msg import EnterDoorAction
from mdr_enter_door_action.action_states import EnterDoorSM

class EnterDoorServer(object):
    '''A server exposing an action in which a robot waits until a door opens and then enters inside.

    The server expects the following parameters to be made available on the ROS parameter server:
    * movement_duration: Time (in seconds) for which the robot should move
    * speed: Movement speed
    * move_forward_server: Name of a server exposing an action for moving a base forward

    @author Alex Mitrevski
    @contact aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        movement_duration = float(rospy.get_param('~movement_duration', 15.))
        speed = float(rospy.get_param('~speed', 0.15))
        move_forward_server = rospy.get_param('~move_forward_server', 'move_forward_server')

        rospy.loginfo('[enter_door] Initialising state machine')
        self.action_sm = EnterDoorSM(move_forward_server=move_forward_server,
                                     movement_duration=movement_duration,
                                     speed=speed)
        rospy.loginfo('[enter_door] State machine initialised')

        self.action_server = actionlib.SimpleActionServer('enter_door_server',
                                                          EnterDoorAction,
                                                          self.execute, False)
        self.action_server.start()
        rospy.loginfo('enter_door action server ready')

    def execute(self, goal):
        rospy.loginfo('[enter_door] Received an action request')
        self.action_sm.goal = goal
        self.action_sm.result = None
        self.action_sm.execution_requested = True
        while not self.action_sm.result:
            rospy.sleep(0.05)
        self.action_server.set_succeeded(self.action_sm.result)

if __name__ == '__main__':
    rospy.init_node('enter_door_server')
    enter_door_server = EnterDoorServer()
    try:
        enter_door_server.action_sm.run()
        while enter_door_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(enter_door_server.action_sm.name))
        enter_door_server.action_sm.stop()
