#!/usr/bin/env python
import rospy
import actionlib

from mdr_move_forward_action.msg import MoveForwardAction
from mdr_move_forward_action.action_states import MoveForwardSM

class MoveForwardServer(object):
    '''A server exposing an action for moving a base forward and backward.

    The server expects the following parameters to be made available on the ROS parameter server:
    * velocity_topic: Name of a topic on which velocity commands are published

    @author Alex Mitrevski
    @contact aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        velocity_topic = rospy.get_param('~velocity_topic', '/cmd_vel')
        rospy.loginfo('[move_forward] Initialising state machine')
        self.action_sm = MoveForwardSM(velocity_topic=velocity_topic)
        rospy.loginfo('[move_forward] State machine initialised')

        self.action_server = actionlib.SimpleActionServer('move_forward_server',
                                                          MoveForwardAction,
                                                          self.execute, False)
        self.action_server.start()
        rospy.loginfo('move_forward action server ready')

    def execute(self, goal):
        rospy.loginfo('[move_forward] Received an action request')
        self.action_sm.goal = goal
        self.action_sm.result = None
        self.action_sm.execution_requested = True
        while not self.action_sm.result:
            rospy.sleep(0.05)
        self.action_server.set_succeeded(self.action_sm.result)

if __name__ == '__main__':
    rospy.init_node('move_forward_server')
    move_forward_server = MoveForwardServer()
    try:
        move_forward_server.action_sm.run()
        while move_forward_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(move_forward_server.action_sm.name))
        move_forward_server.action_sm.stop()
