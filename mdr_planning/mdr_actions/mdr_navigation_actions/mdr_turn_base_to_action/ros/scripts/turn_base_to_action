#!/usr/bin/env python
import rospy
import actionlib

from mdr_turn_base_to_action.msg import TurnBaseToAction
from mdr_turn_base_to_action.action_states import TurnBaseSM

class TurnBaseServer(object):
    '''A server exposing an action for turning a robot base to a desired angle.

    The server expects the following parameters to be made available on the ROS parameter server:
    * move_base_server: Name of an action server for moving the base
    * rotation_frame: Name of the frame in which the rotation is performed

    @author Alex Mitrevski, Jose Mayoral Banos
    @contact aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        move_base_server_name = rospy.get_param('~move_base_server', '/move_base')
        rotation_frame = rospy.get_param('~rotation_frame', 'base_link')

        rospy.loginfo('[turn_base] Initialising state machine')
        self.action_sm = TurnBaseSM(move_base_server=move_base_server_name,
                                    rotation_frame=rotation_frame)
        rospy.loginfo('[turn_base] State machine initialised')

        self.action_server = actionlib.SimpleActionServer('turn_base_to_server',
                                                          TurnBaseToAction,
                                                          self.execute, False)
        self.action_server.start()
        rospy.loginfo('turn_base action server ready')

    def execute(self, goal):
        rospy.loginfo('[turn_base] Received an action request')
        self.action_sm.goal = goal
        self.action_sm.result = None
        self.action_sm.execution_requested = True
        while not self.action_sm.result:
            rospy.sleep(0.05)
        self.action_server.set_succeeded(self.action_sm.result)

if __name__ == '__main__':
    rospy.init_node('turn_base_server')
    turn_base_server = TurnBaseServer()
    try:
        turn_base_server.action_sm.run()
        while turn_base_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(turn_base_server.action_sm.name))
        turn_base_server.action_sm.stop()
